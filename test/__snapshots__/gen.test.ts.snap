// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`basic 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{}",
  "importStrings": "import locale_en_jsonen from \\"../locales/en.json\\" assert { type: \\"json\\" };
import locale_ja_jsonja from \\"../locales/ja.json\\" assert { type: \\"json\\" };
import locale_fr_jsonfr from \\"../locales/fr.json\\" assert { type: \\"json\\" };
",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
  ],
  "localeMessages": "{
  en: [
    {
      key: \\"../locales/en.json\\",
      load: () => Promise.resolve(locale_en_jsonen)
    }
  ],
  ja: [
    {
      key: \\"../locales/ja.json\\",
      load: () => Promise.resolve(locale_ja_jsonja)
    }
  ],
  fr: [
    {
      key: \\"../locales/fr.json\\",
      load: () => Promise.resolve(locale_fr_jsonfr)
    }
  ]
}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "defaultLocale": "en",
    "vueI18n": {
      "fallbackLocale": "fr",
      "locale": "en",
      "messages": {
        "en": {
          "hello": "Hello!",
        },
      },
    },
  },
  "nuxtI18nOptionsDefault": {
    "baseUrl": "",
    "customRoutes": "page",
    "debug": false,
    "defaultDirection": "ltr",
    "defaultLocale": "",
    "defaultLocaleRouteNameSuffix": "default",
    "detectBrowserLanguage": {
      "alwaysRedirect": false,
      "cookieCrossOrigin": false,
      "cookieDomain": null,
      "cookieKey": "i18n_redirected",
      "cookieSecure": false,
      "fallbackLocale": "",
      "redirectOn": "root",
      "useCookie": true,
    },
    "differentDomains": false,
    "dynamicRouteParams": false,
    "experimental": {
      "jsTsFormatResource": false,
    },
    "langDir": null,
    "lazy": false,
    "locales": [],
    "pages": {},
    "precompile": {
      "escapeHtml": false,
      "strictMessage": true,
    },
    "rootRedirect": null,
    "routesNameSeparator": "___",
    "skipSettingLocaleOnNavigate": false,
    "strategy": "prefix_except_default",
    "trailingSlash": false,
    "types": undefined,
    "vueI18n": undefined,
  },
  "vueI18nOptionsLoader": "async context => ({
    messages: {
      en: {
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"Hello!\\"])};fn.source=\\"Hello!\\";return fn;})()
}
    },
    locale: \\"en\\",
    fallbackLocale: \\"fr\\"
  })
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
",
}
`;

exports[`lazy 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{}",
  "importStrings": "",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
  ],
  "localeMessages": "{
  en: [
    {
      key: \\"../locales/en.json\\",
      load: () => import(\\"../locales/en.json\\" /* webpackChunkName: \\"lang_en_json_en_json\\" */)
    }
  ],
  ja: [
    {
      key: \\"../locales/ja.json\\",
      load: () => import(\\"../locales/ja.json\\" /* webpackChunkName: \\"lang_ja_json_ja_json\\" */)
    }
  ],
  fr: [
    {
      key: \\"../locales/fr.json\\",
      load: () => import(\\"../locales/fr.json\\" /* webpackChunkName: \\"lang_fr_json_fr_json\\" */)
    }
  ]
}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "defaultLocale": "en",
    "vueI18n": {
      "fallbackLocale": "fr",
      "locale": "en",
      "messages": {
        "en": {
          "hello": "Hello!",
        },
      },
    },
  },
  "nuxtI18nOptionsDefault": undefined,
  "vueI18nOptionsLoader": "async context => ({
    messages: {
      en: {
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"Hello!\\"])};fn.source=\\"Hello!\\";return fn;})()
}
    },
    locale: \\"en\\",
    fallbackLocale: \\"fr\\"
  })
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
",
}
`;

exports[`locale file in nested 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{}",
  "importStrings": "",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
  ],
  "localeMessages": "{
  en: [
    {
      key: \\"../locales/en/main.json\\",
      load: () => import(\\"../locales/en/main.json\\" /* webpackChunkName: \\"lang_en_en_main_json\\" */)
    }
  ],
  ja: [
    {
      key: \\"../locales/ja/main.json\\",
      load: () => import(\\"../locales/ja/main.json\\" /* webpackChunkName: \\"lang_ja_ja_main_json\\" */)
    }
  ],
  fr: [
    {
      key: \\"../locales/fr/main.json\\",
      load: () => import(\\"../locales/fr/main.json\\" /* webpackChunkName: \\"lang_fr_fr_main_json\\" */)
    }
  ]
}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "defaultLocale": "en",
    "vueI18n": {
      "fallbackLocale": "fr",
      "locale": "en",
      "messages": {
        "en": {
          "hello": "Hello!",
        },
      },
    },
  },
  "nuxtI18nOptionsDefault": undefined,
  "vueI18nOptionsLoader": "async context => ({
    messages: {
      en: {
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"Hello!\\"])};fn.source=\\"Hello!\\";return fn;})()
}
    },
    locale: \\"en\\",
    fallbackLocale: \\"fr\\"
  })
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
",
}
`;

exports[`multiple files 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{}",
  "importStrings": "",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
    "es",
    "es-AR",
  ],
  "localeMessages": "{
  en: [
    {
      key: \\"../locales/en.json\\",
      load: () => import(\\"../locales/en.json\\" /* webpackChunkName: \\"lang_en_json_en_json\\" */)
    }
  ],
  ja: [
    {
      key: \\"../locales/ja.json\\",
      load: () => import(\\"../locales/ja.json\\" /* webpackChunkName: \\"lang_ja_json_ja_json\\" */)
    }
  ],
  fr: [
    {
      key: \\"../locales/fr.json\\",
      load: () => import(\\"../locales/fr.json\\" /* webpackChunkName: \\"lang_fr_json_fr_json\\" */)
    }
  ],
  es: [
    {
      key: \\"../locales/es.json\\",
      load: () => import(\\"../locales/es.json\\" /* webpackChunkName: \\"lang_es_json_es_json\\" */)
    }
  ],
  \\"es-AR\\": [
    {
      key: \\"../locales/es.json\\",
      load: () => import(\\"../locales/es.json\\" /* webpackChunkName: \\"lang_es_json_es_json\\" */)
    },
    {
      key: \\"../locales/es-AR.json\\",
      load: () => import(\\"../locales/es-AR.json\\" /* webpackChunkName: \\"lang_es_AR_json_es_AR_json\\" */)
    }
  ]
}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "defaultLocale": "en",
    "vueI18n": {
      "fallbackLocale": "fr",
      "locale": "en",
      "messages": {
        "en": {
          "hello": "Hello!",
        },
      },
    },
  },
  "nuxtI18nOptionsDefault": undefined,
  "vueI18nOptionsLoader": "async context => ({
    messages: {
      en: {
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"Hello!\\"])};fn.source=\\"Hello!\\";return fn;})()
}
    },
    locale: \\"en\\",
    fallbackLocale: \\"fr\\"
  })
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
",
}
`;

exports[`toCode: function (arrow) 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{}",
  "importStrings": "",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
  ],
  "localeMessages": "{}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "defaultLocale": "en",
    "locales": [
      {
        "code": "en",
        "file": "en.json",
        "testFunc": [Function],
      },
      {
        "code": "ja",
        "file": "ja.json",
        "testFunc": [Function],
      },
      {
        "code": "fr",
        "file": "fr.json",
        "testFunc": [Function],
      },
    ],
    "vueI18n": {
      "fallbackLocale": "fr",
      "locale": "en",
      "messages": {
        "en": {
          "hello": "Hello!",
        },
      },
    },
  },
  "nuxtI18nOptionsDefault": {
    "baseUrl": "",
    "customRoutes": "page",
    "debug": false,
    "defaultDirection": "ltr",
    "defaultLocale": "",
    "defaultLocaleRouteNameSuffix": "default",
    "detectBrowserLanguage": {
      "alwaysRedirect": false,
      "cookieCrossOrigin": false,
      "cookieDomain": null,
      "cookieKey": "i18n_redirected",
      "cookieSecure": false,
      "fallbackLocale": "",
      "redirectOn": "root",
      "useCookie": true,
    },
    "differentDomains": false,
    "dynamicRouteParams": false,
    "experimental": {
      "jsTsFormatResource": false,
    },
    "langDir": null,
    "lazy": false,
    "locales": [],
    "pages": {},
    "precompile": {
      "escapeHtml": false,
      "strictMessage": true,
    },
    "rootRedirect": null,
    "routesNameSeparator": "___",
    "skipSettingLocaleOnNavigate": false,
    "strategy": "prefix_except_default",
    "trailingSlash": false,
    "types": undefined,
    "vueI18n": undefined,
  },
  "vueI18nOptionsLoader": "async context => ({
    messages: {
      en: {
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"Hello!\\"])};fn.source=\\"Hello!\\";return fn;})()
}
    },
    locale: \\"en\\",
    fallbackLocale: \\"fr\\"
  })
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
",
}
`;

exports[`toCode: function (named) 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{}",
  "importStrings": "",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
  ],
  "localeMessages": "{}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "defaultLocale": "en",
    "locales": [
      {
        "code": "en",
        "file": "en.json",
        "testFunc": [Function],
      },
      {
        "code": "ja",
        "file": "ja.json",
        "testFunc": [Function],
      },
      {
        "code": "fr",
        "file": "fr.json",
        "testFunc": [Function],
      },
    ],
    "vueI18n": {
      "fallbackLocale": "fr",
      "locale": "en",
      "messages": {
        "en": {
          "hello": "Hello!",
        },
      },
    },
  },
  "nuxtI18nOptionsDefault": {
    "baseUrl": "",
    "customRoutes": "page",
    "debug": false,
    "defaultDirection": "ltr",
    "defaultLocale": "",
    "defaultLocaleRouteNameSuffix": "default",
    "detectBrowserLanguage": {
      "alwaysRedirect": false,
      "cookieCrossOrigin": false,
      "cookieDomain": null,
      "cookieKey": "i18n_redirected",
      "cookieSecure": false,
      "fallbackLocale": "",
      "redirectOn": "root",
      "useCookie": true,
    },
    "differentDomains": false,
    "dynamicRouteParams": false,
    "experimental": {
      "jsTsFormatResource": false,
    },
    "langDir": null,
    "lazy": false,
    "locales": [],
    "pages": {},
    "precompile": {
      "escapeHtml": false,
      "strictMessage": true,
    },
    "rootRedirect": null,
    "routesNameSeparator": "___",
    "skipSettingLocaleOnNavigate": false,
    "strategy": "prefix_except_default",
    "trailingSlash": false,
    "types": undefined,
    "vueI18n": undefined,
  },
  "vueI18nOptionsLoader": "async context => ({
    messages: {
      en: {
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"Hello!\\"])};fn.source=\\"Hello!\\";return fn;})()
}
    },
    locale: \\"en\\",
    fallbackLocale: \\"fr\\"
  })
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
",
}
`;

exports[`vueI18n: path 1`] = `
{
  "NUXT_I18N_MODULE_ID": "@nuxtjs/i18n",
  "NUXT_I18N_PRECOMPILED_LOCALE_KEY": "i18n-locales",
  "NUXT_I18N_PRECOMPILE_ENDPOINT": "/api/__i18n__",
  "additionalMessages": "{
  en: [
    () => Promise.resolve({
  \\"foo\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"foo\\"])};fn.source=\\"foo\\";return fn;})(),
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello1\\"])};fn.source=\\"hello1\\";return fn;})()
}),
    () => Promise.resolve({
  \\"bar\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"bar\\"])};fn.source=\\"bar\\";return fn;})(),
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello2\\"])};fn.source=\\"hello2\\";return fn;})()
})
  ],
  ja: [
    () => Promise.resolve({
  \\"buz\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"buz\\"])};fn.source=\\"buz\\";return fn;})(),
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello3\\"])};fn.source=\\"hello3\\";return fn;})()
}),
    () => Promise.resolve({
  \\"baz\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"baz\\"])};fn.source=\\"baz\\";return fn;})(),
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello4\\"])};fn.source=\\"hello4\\";return fn;})()
})
  ]
}",
  "importStrings": "import locale_en_jsonen from \\"../locales/en.json\\" assert { type: \\"json\\" };
import locale_ja_jsonja from \\"../locales/ja.json\\" assert { type: \\"json\\" };
import locale_fr_jsonfr from \\"../locales/fr.json\\" assert { type: \\"json\\" };
",
  "isSSG": false,
  "isSSR": true,
  "localeCodes": [
    "en",
    "ja",
    "fr",
  ],
  "localeMessages": "{
  en: [
    {
      key: \\"../locales/en.json\\",
      load: () => Promise.resolve(locale_en_jsonen)
    }
  ],
  ja: [
    {
      key: \\"../locales/ja.json\\",
      load: () => Promise.resolve(locale_ja_jsonja)
    }
  ],
  fr: [
    {
      key: \\"../locales/fr.json\\",
      load: () => Promise.resolve(locale_fr_jsonfr)
    }
  ]
}",
  "nuxtI18nInternalOptions": {
    "__normalizedLocales": [
      {
        "code": "en",
      },
    ],
  },
  "nuxtI18nOptions": {
    "vueI18n": "~/plugins/vue-i18n.js",
  },
  "nuxtI18nOptionsDefault": undefined,
  "vueI18nOptionsLoader": "async context => import(\\"~/plugins/vue-i18n.js\\").then(r => (r.default || r)(context))
  nuxtI18nOptions.vueI18n = await vueI18nOptionsLoader(context)
if (nuxtI18nOptions.vueI18n.messages) {
		console.warn(\\"[@nuxtjs/i18n]: Cannot include 'messages' option in 'vue-i18n.js'. Please use Lazy-load translations.\\")
		nuxtI18nOptions.vueI18n.messages = {}
	  }",
}
`;
